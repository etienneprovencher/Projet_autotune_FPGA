/*
 *
 * @file main.c
 * @brief Main routine
 *
 * @section License
 *
 * Copyright (C) 2010-2018 Oryx Embedded SARL. All rights reserved.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *
 * @author Oryx Embedded SARL (www.oryx-embedded.com)
 * @version 1.9.0
 **/

//Dependencies
//#include <stdlib.h>
#include "xparameters.h"
#include "FIFO_FFT_driver.h"

//stucture for the axi-stream fifos that feed the fft module
XLlFifo FifoInstance, FifoInstance2; //to write the data and the config

//data returned from axi-stream processing flag
volatile u32 Received;


//the output index of the FFT is bit reversed. Look-up table for the destination index
//e.g. index 1100110 is in fact the 0110011 element of the natural order result
u16 FFT_ReorderIndex[MAX_DATA_BUFFER_SIZE]=
       {0x00, 0x100, 0x80, 0x180, 0x40, 0x140, 0xc0, 0x1c0, 0x20, 0x120, 0xa0, 0x1a0, 0x60, 0x160, 0xe0, 0x1e0,
		0x10, 0x110, 0x90, 0x190, 0x50, 0x150, 0xd0, 0x1d0, 0x30, 0x130, 0xb0, 0x1b0, 0x70, 0x170, 0xf0, 0x1f0,
		0x08, 0x108, 0x88, 0x188, 0x48, 0x148, 0xc8, 0x1c8, 0x28, 0x128, 0xa8, 0x1a8, 0x68, 0x168, 0xe8, 0x1e8,
		0x18, 0x118, 0x98, 0x198, 0x58, 0x158, 0xd8, 0x1d8, 0x38, 0x138, 0xb8, 0x1b8, 0x78, 0x178, 0xf8, 0x1f8,
		0x04, 0x104, 0x84, 0x184, 0x44, 0x144, 0xc4, 0x1c4, 0x24, 0x124, 0xa4, 0x1a4, 0x64, 0x164, 0xe4, 0x1e4,
		0x14, 0x114, 0x94, 0x194, 0x54, 0x154, 0xd4, 0x1d4, 0x34, 0x134, 0xb4, 0x1b4, 0x74, 0x174, 0xf4, 0x1f4,
		0x0c, 0x10c, 0x8c, 0x18c, 0x4c, 0x14c, 0xcc, 0x1cc, 0x2c, 0x12c, 0xac, 0x1ac, 0x6c, 0x16c, 0xec, 0x1ec,
		0x1c, 0x11c, 0x9c, 0x19c, 0x5c, 0x15c, 0xdc, 0x1dc, 0x3c, 0x13c, 0xbc, 0x1bc, 0x7c, 0x17c, 0xfc, 0x1fc,
		0x02, 0x102, 0x82, 0x182, 0x42, 0x142, 0xc2, 0x1c2, 0x22, 0x122, 0xa2, 0x1a2, 0x62, 0x162, 0xe2, 0x1e2,
		0x12, 0x112, 0x92, 0x192, 0x52, 0x152, 0xd2, 0x1d2, 0x32, 0x132, 0xb2, 0x1b2, 0x72, 0x172, 0xf2, 0x1f2,
		0x0a, 0x10a, 0x8a, 0x18a, 0x4a, 0x14a, 0xca, 0x1ca, 0x2a, 0x12a, 0xaa, 0x1aa, 0x6a, 0x16a, 0xea, 0x1ea,
		0x1a, 0x11a, 0x9a, 0x19a, 0x5a, 0x15a, 0xda, 0x1da, 0x3a, 0x13a, 0xba, 0x1ba, 0x7a, 0x17a, 0xfa, 0x1fa,
		0x06, 0x106, 0x86, 0x186, 0x46, 0x146, 0xc6, 0x1c6, 0x26, 0x126, 0xa6, 0x1a6, 0x66, 0x166, 0xe6, 0x1e6};


void initFIFO_FFT(){
	//initialize les fifos axi-stream
	int Status;
	Status = XLFifoInit(&FifoInstance, FIFO_FFT_ID);
	Status = XLFifoInit(&FifoInstance2, FIFO_CONFIG_ID);
	SetupInterruptSystem();
	XLlFifo_IntEnable(&FifoInstance, XLLF_INT_ALL_MASK);
}

void do_forward_FFT(u32* dataToFFT, u32* FFTResult)
{
	u32 FFTConf = 0x1; // = forward fft, no scaling
	if( XLlFifo_iTxVacancy(&FifoInstance2) ){
		XLlFifo_TxPutWord(&FifoInstance2, FFTConf);
	}
	XLlFifo_iTxSetLen(&FifoInstance2, 1);		/* The data is actually sent here by writing into the TLR */

	//Envoie les données à convertir au module FFT
	Received = 0;
	int Status = XLlFifoSendData(&FifoInstance, FIFO_FFT_ID, dataToFFT);
	while(!Received); //wait for the data to come out of the fft processing via interrupt

	//build the natural order result
	for(unsigned int i=0;i<MAX_DATA_BUFFER_SIZE;i++){
		FFTResult[i] = ReceiveTempBuffer[FFT_ReorderIndex[i]];
	}

}

void do_reverse_FFT(u32* dataToiFFT, u32* iFFTResult)
{
	//now for the IFFT
	u32 FFTConf = 0b01101010 << 1; //this is the scaling required to recover the original time-domain data; bit0 = 0 -> IFFT
	if( XLlFifo_iTxVacancy(&FifoInstance2) ){
		XLlFifo_TxPutWord(&FifoInstance2, FFTConf);
	}
	XLlFifo_iTxSetLen(&FifoInstance2, 1); //same as above

	Received = 0;
	int Status = XLlFifoSendData(&FifoInstance, FIFO_FFT_ID, dataToiFFT);
	while(!Received); //wait for the data to come out of the fft processing via interrupt

	//again build the natural order result
	for(unsigned int i=0;i<MAX_DATA_BUFFER_SIZE;i++){
		iFFTResult[i] = ReceiveTempBuffer[FFT_ReorderIndex[i]];
	}

}

