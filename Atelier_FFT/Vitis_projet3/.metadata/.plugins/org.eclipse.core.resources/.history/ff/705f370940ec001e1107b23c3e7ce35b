/*
 *
 * @file main.c
 * @brief Main routine
 *
 * @section License
 *
 * Copyright (C) 2010-2018 Oryx Embedded SARL. All rights reserved.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *
 * @author Oryx Embedded SARL (www.oryx-embedded.com)
 * @version 1.9.0
 **/

//Dependencies
//#include <stdlib.h>
#include "xparameters.h"
#include "FIFO_FFT_driver.h"

//stucture for the axi-stream fifos that feed the fft module
XLlFifo FifoInstance, FifoInstance2; //to write the data and the config

//data returned from axi-stream processing flag
volatile u32 Received;


//the output index of the FFT is bit reversed. Look-up table for the destination index
//e.g. index 1100110 is in fact the 0110011 element of the natural order result
u16 FFT_ReorderIndex[MAX_DATA_BUFFER_SIZE]=
    {0x00, 0x200, 0x100, 0x300, 0x80, 0x280, 0x180, 0x380, 0x40, 0x240, 0x140, 0x340, 0xc0, 0x2c0, 0x1c0, 0x3c0,
     0x20, 0x220, 0x120, 0x320, 0xa0, 0x2a0, 0x1a0, 0x3a0, 0x60, 0x260, 0x160, 0x360, 0xe0, 0x2e0, 0x1e0, 0x3e0,
	 0x10, 0x210, 0x110, 0x310, 0x90, 0x290, 0x190, 0x390, 0x50, 0x250, 0x150, 0x350, 0xd0, 0x2d0, 0x1d0, 0x3d0,
	 0x30, 0x230, 0x130, 0x330, 0xb0, 0x2b0, 0x1b0, 0x3b0, 0x70, 0x270, 0x170, 0x370, 0xf0, 0x2f0, 0x1f0, 0x3f0,
	 0x08, 0x208, 0x108, 0x308, 0x88, 0x288, 0x188, 0x388, 0x48, 0x248, 0x148, 0x348, 0xc8, 0x2c8, 0x1c8, 0x3c8,
	 0x28, 0x228, 0x128, 0x328, 0xa8, 0x2a8, 0x1a8, 0x3a8, 0x68, 0x268, 0x168, 0x368, 0xe8, 0x2e8, 0x1e8, 0x3e8,
	 0x18, 0x218, 0x118, 0x318, 0x98, 0x298, 0x198, 0x398, 0x58, 0x258, 0x158, 0x358, 0xd8, 0x2d8, 0x1d8, 0x3d8,
	 0x38, 0x238, 0x138, 0x338, 0xb8, 0x2b8, 0x1b8, 0x3b8, 0x78, 0x278, 0x178, 0x378, 0xf8, 0x2f8, 0x1f8, 0x3f8,
	 0x04, 0x204, 0x104, 0x304, 0x84, 0x284, 0x184, 0x384, 0x44, 0x244, 0x144, 0x344, 0xc4, 0x2c4, 0x1c4, 0x3c4,
	 0x24, 0x224, 0x124, 0x324, 0xa4, 0x2a4, 0x1a4, 0x3a4, 0x64, 0x264, 0x164, 0x364, 0xe4, 0x2e4, 0x1e4, 0x3e4,
	 0x14, 0x214, 0x114, 0x314, 0x94, 0x294, 0x194, 0x394, 0x54, 0x254, 0x154, 0x354, 0xd4, 0x2d4, 0x1d4, 0x3d4,
	 0x34, 0x234, 0x134, 0x334, 0xb4, 0x2b4, 0x1b4, 0x3b4, 0x74, 0x274, 0x174, 0x374, 0xf4, 0x2f4, 0x1f4, 0x3f4,
	 0x0c, 0x20c, 0x10c, 0x30c, 0x8c, 0x28c, 0x18c, 0x38c, 0x4c, 0x24c, 0x14c, 0x34c, 0xcc, 0x2cc, 0x1cc, 0x3cc,
	 0x2c, 0x22c, 0x12c, 0x32c, 0xac, 0x2ac, 0x1ac, 0x3ac, 0x6c, 0x26c, 0x16c, 0x36c, 0xec, 0x2ec, 0x1ec, 0x3ec,
	 0x1c, 0x21c, 0x11c, 0x31c, 0x9c, 0x29c, 0x19c, 0x39c, 0x5c, 0x25c, 0x15c, 0x35c, 0xdc, 0x2dc, 0x1dc, 0x3dc,
	 0x3c, 0x23c, 0x13c, 0x33c, 0xbc, 0x2bc, 0x1bc, 0x3bc, 0x7c, 0x27c, 0x17c, 0x37c, 0xfc, 0x2fc, 0x1fc, 0x3fc,
	 0x02, 0x202, 0x102, 0x302, 0x82, 0x282, 0x182, 0x382, 0x42, 0x242, 0x142, 0x342, 0xc2, 0x2c2, 0x1c2, 0x3c2,
	 0x22, 0x222, 0x122, 0x322, 0xa2, 0x2a2, 0x1a2, 0x3a2, 0x62, 0x262, 0x162, 0x362, 0xe2, 0x2e2, 0x1e2, 0x3e2,
	 0x12, 0x212, 0x112, 0x312, 0x92, 0x292, 0x192, 0x392, 0x52, 0x252, 0x152, 0x352, 0xd2, 0x2d2, 0x1d2, 0x3d2,
	 0x32, 0x232, 0x132, 0x332, 0xb2, 0x2b2, 0x1b2, 0x3b2, 0x72, 0x272, 0x172, 0x372, 0xf2, 0x2f2, 0x1f2, 0x3f2,
	 0x0a, 0x20a, 0x10a, 0x30a, 0x8a, 0x28a, 0x18a, 0x38a, 0x4a, 0x24a, 0x14a, 0x34a, 0xca, 0x2ca, 0x1ca, 0x3ca,
	 0x2a, 0x22a, 0x12a, 0x32a, 0xaa, 0x2aa, 0x1aa, 0x3aa, 0x6a, 0x26a, 0x16a, 0x36a, 0xea, 0x2ea, 0x1ea, 0x3ea,
	 0x1a, 0x21a, 0x11a, 0x31a, 0x9a, 0x29a, 0x19a, 0x39a, 0x5a, 0x25a, 0x15a, 0x35a, 0xda, 0x2da, 0x1da, 0x3da,
	 0x3a, 0x23a, 0x13a, 0x33a, 0xba, 0x2ba, 0x1ba, 0x3ba, 0x7a, 0x27a, 0x17a, 0x37a, 0xfa, 0x2fa, 0x1fa, 0x3fa,
	 0x06, 0x206, 0x106, 0x306, 0x86, 0x286, 0x186, 0x386, 0x46, 0x246, 0x146, 0x346, 0xc6, 0x2c6, 0x1c6, 0x3c6,
	 0x26, 0x226, 0x126, 0x326, 0xa6, 0x2a6, 0x1a6, 0x3a6, 0x66, 0x266, 0x166, 0x366, 0xe6, 0x2e6, 0x1e6, 0x3e6,
	 0x16, 0x216, 0x116, 0x316, 0x96, 0x296, 0x196, 0x396, 0x56, 0x256, 0x156, 0x356, 0xd6, 0x2d6, 0x1d6, 0x3d6,
	 0x36, 0x236, 0x136, 0x336, 0xb6, 0x2b6, 0x1b6, 0x3b6, 0x76, 0x276, 0x176, 0x376, 0xf6, 0x2f6, 0x1f6, 0x3f6,
	 0x0e, 0x20e, 0x10e, 0x30e, 0x8e, 0x28e, 0x18e, 0x38e, 0x4e, 0x24e, 0x14e, 0x34e, 0xce, 0x2ce, 0x1ce, 0x3ce,
	 0x2e, 0x22e, 0x12e, 0x32e, 0xae, 0x2ae, 0x1ae, 0x3ae, 0x6e, 0x26e, 0x16e, 0x36e, 0xee, 0x2ee, 0x1ee, 0x3ee,
	 0x1e, 0x21e, 0x11e, 0x31e, 0x9e, 0x29e, 0x19e, 0x39e, 0x5e, 0x25e, 0x15e, 0x35e, 0xde, 0x2de, 0x1de, 0x3de,
	 0x3e, 0x23e, 0x13e, 0x33e, 0xbe, 0x2be, 0x1be, 0x3be, 0x7e, 0x27e, 0x17e, 0x37e, 0xfe, 0x2fe, 0x1fe, 0x3fe,
	 0x01, 0x201, 0x101, 0x301, 0x81, 0x281, 0x181, 0x381, 0x41, 0x241, 0x141, 0x341, 0xc1, 0x2c1, 0x1c1, 0x3c1,
	 0x21, 0x221, 0x121, 0x321, 0xa1, 0x2a1, 0x1a1, 0x3a1, 0x61, 0x261, 0x161, 0x361, 0xe1, 0x2e1, 0x1e1, 0x3e1,
	 0x11, 0x211, 0x111, 0x311, 0x91, 0x291, 0x191, 0x391, 0x51, 0x251, 0x151, 0x351, 0xd1, 0x2d1, 0x1d1, 0x3d1,
	 0x31, 0x231, 0x131, 0x331, 0xb1, 0x2b1, 0x1b1, 0x3b1, 0x71, 0x271, 0x171, 0x371, 0xf1, 0x2f1, 0x1f1, 0x3f1,
	 0x09, 0x209, 0x109, 0x309, 0x89, 0x289, 0x189, 0x389, 0x49, 0x249, 0x149, 0x349, 0xc9, 0x2c9, 0x1c9, 0x3c9,
	 0x29, 0x229, 0x129, 0x329, 0xa9, 0x2a9, 0x1a9, 0x3a9, 0x69, 0x269, 0x169, 0x369, 0xe9, 0x2e9, 0x1e9, 0x3e9,
	 0x19, 0x219, 0x119, 0x319, 0x99, 0x299, 0x199, 0x399, 0x59, 0x259, 0x159, 0x359, 0xd9, 0x2d9, 0x1d9, 0x3d9,
	 0x39, 0x239, 0x139, 0x339, 0xb9, 0x2b9, 0x1b9, 0x3b9, 0x79, 0x279, 0x179, 0x379, 0xf9, 0x2f9, 0x1f9, 0x3f9,
	 0x05, 0x205, 0x105, 0x305, 0x85, 0x285, 0x185, 0x385, 0x45, 0x245, 0x145, 0x345, 0xc5, 0x2c5, 0x1c5, 0x3c5,
	 0x25, 0x225, 0x125, 0x325, 0xa5, 0x2a5, 0x1a5, 0x3a5, 0x65, 0x265, 0x165, 0x365, 0xe5, 0x2e5, 0x1e5, 0x3e5,
	 0x15, 0x215, 0x115, 0x315, 0x95, 0x295, 0x195, 0x395, 0x55, 0x255, 0x155, 0x355, 0xd5, 0x2d5, 0x1d5, 0x3d5,
	 0x35, 0x235, 0x135, 0x335, 0xb5, 0x2b5, 0x1b5, 0x3b5, 0x75, 0x275, 0x175, 0x375, 0xf5, 0x2f5, 0x1f5, 0x3f5,
	 0x0d, 0x20d, 0x10d, 0x30d, 0x8d, 0x28d, 0x18d, 0x38d, 0x4d, 0x24d, 0x14d, 0x34d, 0xcd, 0x2cd, 0x1cd, 0x3cd,
	 0x2d, 0x22d, 0x12d, 0x32d, 0xad, 0x2ad, 0x1ad, 0x3ad, 0x6d, 0x26d, 0x16d, 0x36d, 0xed, 0x2ed, 0x1ed, 0x3ed,
	 0x1d, 0x21d, 0x11d, 0x31d, 0x9d, 0x29d, 0x19d, 0x39d, 0x5d, 0x25d, 0x15d, 0x35d, 0xdd, 0x2dd, 0x1dd, 0x3dd,
	 0x3d, 0x23d, 0x13d, 0x33d, 0xbd, 0x2bd, 0x1bd, 0x3bd, 0x7d, 0x27d, 0x17d, 0x37d, 0xfd, 0x2fd, 0x1fd, 0x3fd,
	 0x03, 0x203, 0x103, 0x303, 0x83, 0x283, 0x183, 0x383, 0x43, 0x243, 0x143, 0x343, 0xc3, 0x2c3, 0x1c3, 0x3c3,
	 0x23, 0x223, 0x123, 0x323, 0xa3, 0x2a3, 0x1a3, 0x3a3, 0x63, 0x263, 0x163, 0x363, 0xe3, 0x2e3, 0x1e3, 0x3e3,
	 0x13, 0x213, 0x113, 0x313, 0x93, 0x293, 0x193, 0x393, 0x53, 0x253, 0x153, 0x353, 0xd3, 0x2d3, 0x1d3, 0x3d3,
	 0x33, 0x233, 0x133, 0x333, 0xb3, 0x2b3, 0x1b3, 0x3b3, 0x73, 0x273, 0x173, 0x373, 0xf3, 0x2f3, 0x1f3, 0x3f3,
	 0x0b, 0x20b, 0x10b, 0x30b, 0x8b, 0x28b, 0x18b, 0x38b, 0x4b, 0x24b, 0x14b, 0x34b, 0xcb, 0x2cb, 0x1cb, 0x3cb,
	 0x2b, 0x22b, 0x12b, 0x32b, 0xab, 0x2ab, 0x1ab, 0x3ab, 0x6b, 0x26b, 0x16b, 0x36b, 0xeb, 0x2eb, 0x1eb, 0x3eb,
	 0x1b, 0x21b, 0x11b, 0x31b, 0x9b, 0x29b, 0x19b, 0x39b, 0x5b, 0x25b, 0x15b, 0x35b, 0xdb, 0x2db, 0x1db, 0x3db,
	 0x3b, 0x23b, 0x13b, 0x33b, 0xbb, 0x2bb, 0x1bb, 0x3bb, 0x7b, 0x27b, 0x17b, 0x37b, 0xfb, 0x2fb, 0x1fb, 0x3fb,
	 0x07, 0x207, 0x107, 0x307, 0x87, 0x287, 0x187, 0x387, 0x47, 0x247, 0x147, 0x347, 0xc7, 0x2c7, 0x1c7, 0x3c7,
	 0x27, 0x227, 0x127, 0x327, 0xa7, 0x2a7, 0x1a7, 0x3a7, 0x67, 0x267, 0x167, 0x367, 0xe7, 0x2e7, 0x1e7, 0x3e7,
	 0x17, 0x217, 0x117, 0x317, 0x97, 0x297, 0x197, 0x397, 0x57, 0x257, 0x157, 0x357, 0xd7, 0x2d7, 0x1d7, 0x3d7,
	 0x37, 0x237, 0x137, 0x337, 0xb7, 0x2b7, 0x1b7, 0x3b7, 0x77, 0x277, 0x177, 0x377, 0xf7, 0x2f7, 0x1f7, 0x3f7,
	 0x0f, 0x20f, 0x10f, 0x30f, 0x8f, 0x28f, 0x18f, 0x38f, 0x4f, 0x24f, 0x14f, 0x34f, 0xcf, 0x2cf, 0x1cf, 0x3cf,
	 0x2f, 0x22f, 0x12f, 0x32f, 0xaf, 0x2af, 0x1af, 0x3af, 0x6f, 0x26f, 0x16f, 0x36f, 0xef, 0x2ef, 0x1ef, 0x3ef,
	 0x1f, 0x21f, 0x11f, 0x31f, 0x9f, 0x29f, 0x19f, 0x39f, 0x5f, 0x25f, 0x15f, 0x35f, 0xdf, 0x2df, 0x1df, 0x3df,
	 0x3f, 0x23f, 0x13f, 0x33f, 0xbf, 0x2bf, 0x1bf, 0x3bf, 0x7f, 0x27f, 0x17f, 0x37f, 0xff, 0x2ff, 0x1ff, 0x3ff};


void initFIFO_FFT(){
	//initialize les fifos axi-stream
	int Status;
	Status = XLFifoInit(&FifoInstance, FIFO_FFT_ID);
	Status = XLFifoInit(&FifoInstance2, FIFO_CONFIG_ID);
	SetupInterruptSystem();
	XLlFifo_IntEnable(&FifoInstance, XLLF_INT_ALL_MASK);
}

void do_forward_FFT(u32* dataToFFT, u32* FFTResult)
{
	u32 FFTConf = 0x1; // = forward fft, no scaling
	if( XLlFifo_iTxVacancy(&FifoInstance2) ){
		XLlFifo_TxPutWord(&FifoInstance2, FFTConf);
	}
	XLlFifo_iTxSetLen(&FifoInstance2, 1);		/* The data is actually sent here by writing into the TLR */

	//Envoie les données à convertir au module FFT
	Received = 0;
	int Status = XLlFifoSendData(&FifoInstance, FIFO_FFT_ID, dataToFFT);
	while(!Received); //wait for the data to come out of the fft processing via interrupt

	//build the natural order result
	for(unsigned int i=0;i<MAX_DATA_BUFFER_SIZE;i++){
		FFTResult[i] = ReceiveTempBuffer[FFT_ReorderIndex[i]];
	}

}

void do_reverse_FFT(u32* dataToiFFT, u32* iFFTResult)
{
	//now for the IFFT
	u32 FFTConf = 0b01101010 << 1; //this is the scaling required to recover the original time-domain data; bit0 = 0 -> IFFT
	if( XLlFifo_iTxVacancy(&FifoInstance2) ){
		XLlFifo_TxPutWord(&FifoInstance2, FFTConf);
	}
	XLlFifo_iTxSetLen(&FifoInstance2, 1); //same as above

	Received = 0;
	int Status = XLlFifoSendData(&FifoInstance, FIFO_FFT_ID, dataToiFFT);
	while(!Received); //wait for the data to come out of the fft processing via interrupt

	//again build the natural order result
	for(unsigned int i=0;i<MAX_DATA_BUFFER_SIZE;i++){
		iFFTResult[i] = ReceiveTempBuffer[FFT_ReorderIndex[i]];
	}

}

